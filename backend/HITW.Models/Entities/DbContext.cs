// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
#nullable disable
using System;
using System.Collections.Generic;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Metadata;

namespace HITW.Models.Entities
{
    public partial class DbContext : DbContext
    {
        public DbContext()
        {
        }

        public DbContext(DbContextOptions<DbContext> options)
            : base(options)
        {
        }

        public virtual DbSet<Answer> Answer { get; set; }
        public virtual DbSet<Commitment> Commitment { get; set; }
        public virtual DbSet<Person> Person { get; set; }
        public virtual DbSet<Project> Project { get; set; }
        public virtual DbSet<Question> Question { get; set; }
        public virtual DbSet<Submission> Submission { get; set; }
        public virtual DbSet<Theme> Theme { get; set; }
        public virtual DbSet<ThemeScore> ThemeScore { get; set; }

        protected override void OnModelCreating(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<Answer>(entity =>
            {
                entity.ToTable("answer");

                entity.Property(e => e.AnswerId).HasColumnName("answer_id");

                entity.Property(e => e.AnswerString)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasColumnName("answer_string");

                entity.Property(e => e.QuestionId).HasColumnName("question_id");

                entity.Property(e => e.ThemeScoreId).HasColumnName("theme_score_id");

                entity.HasOne(d => d.Question)
                    .WithMany(p => p.Answer)
                    .HasForeignKey(d => d.QuestionId)
                    .HasConstraintName("fk_question");

                entity.HasOne(d => d.ThemeScore)
                    .WithMany(p => p.Answer)
                    .HasForeignKey(d => d.ThemeScoreId)
                    .HasConstraintName("fk_theme_score");
            });

            modelBuilder.Entity<Commitment>(entity =>
            {
                entity.ToTable("commitment");

                entity.Property(e => e.CommitmentId).HasColumnName("commitment_id");

                entity.Property(e => e.Description)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasColumnName("description");

                entity.Property(e => e.ProjectId).HasColumnName("project_id");

                entity.Property(e => e.TargetDate)
                    .HasColumnType("date")
                    .HasColumnName("target_date");

                entity.HasOne(d => d.Project)
                    .WithMany(p => p.Commitment)
                    .HasForeignKey(d => d.ProjectId)
                    .HasConstraintName("fk_project_commitment");
            });

            modelBuilder.Entity<Person>(entity =>
            {
                entity.ToTable("person");

                entity.Property(e => e.PersonId).HasColumnName("person_id");

                entity.Property(e => e.Lastname)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("lastname");

                entity.Property(e => e.Name)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("name");
            });

            modelBuilder.Entity<Project>(entity =>
            {
                entity.ToTable("project");

                entity.Property(e => e.ProjectId).HasColumnName("project_id");

                entity.Property(e => e.PersonId).HasColumnName("person_id");

                entity.Property(e => e.ProjectName)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("project_name");

                entity.HasOne(d => d.Person)
                    .WithMany(p => p.Project)
                    .HasForeignKey(d => d.PersonId)
                    .HasConstraintName("fk_person");
            });

            modelBuilder.Entity<Question>(entity =>
            {
                entity.ToTable("question");

                entity.Property(e => e.QuestionId).HasColumnName("question_id");

                entity.Property(e => e.QuestionName)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("question_name");

                entity.Property(e => e.QuestionString)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasColumnName("question_string");

                entity.Property(e => e.ThemeId).HasColumnName("theme_id");

                entity.HasOne(d => d.Theme)
                    .WithMany(p => p.Question)
                    .HasForeignKey(d => d.ThemeId)
                    .HasConstraintName("fk_theme");
            });

            modelBuilder.Entity<Submission>(entity =>
            {
                entity.ToTable("submission");

                entity.Property(e => e.SubmissionId).HasColumnName("submission_id");

                entity.Property(e => e.Comment)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasColumnName("comment");

                entity.Property(e => e.CommitmentId).HasColumnName("commitment_id");

                entity.Property(e => e.Picture).HasColumnName("picture");

                entity.HasOne(d => d.Commitment)
                    .WithMany(p => p.Submission)
                    .HasForeignKey(d => d.CommitmentId)
                    .HasConstraintName("fk_commitment");
            });

            modelBuilder.Entity<Theme>(entity =>
            {
                entity.ToTable("theme");

                entity.Property(e => e.ThemeId).HasColumnName("theme_id");

                entity.Property(e => e.ThemeName)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("theme_name");
            });

            modelBuilder.Entity<ThemeScore>(entity =>
            {
                entity.ToTable("theme_score");

                entity.Property(e => e.ThemeScoreId).HasColumnName("theme_score_id");

                entity.Property(e => e.ProjectId).HasColumnName("project_id");

                entity.Property(e => e.Score).HasColumnName("score");

                entity.Property(e => e.ThemeId).HasColumnName("theme_id");

                entity.HasOne(d => d.Project)
                    .WithMany(p => p.ThemeScore)
                    .HasForeignKey(d => d.ProjectId)
                    .HasConstraintName("fk_project_theme_score");

                entity.HasOne(d => d.Theme)
                    .WithMany(p => p.ThemeScore)
                    .HasForeignKey(d => d.ThemeId)
                    .HasConstraintName("fk_theme_theme_score");
            });

            OnModelCreatingPartial(modelBuilder);
        }

        partial void OnModelCreatingPartial(ModelBuilder modelBuilder);
    }
}